import collections

from pymongo import InsertOne, UpdateOne
from datetime import datetime # Addition-entity-watchlist: Line modified
from lib.Toolkit import isBlacklisted # Addition-entity-watchlist: Line modified
from lib.signalNotification import sendNotification  # Addition-entity-watchlist: Line modified

# Addition-entity-watchlist: Begining of changes

from lib.DatabaseLayer import (getWatchlistCVE,  # Addition-entity-watchlist: Line modified
                               getAllEntities,  # Addition-entity-watchlist: Line modified
                               updateWatchlistCVE,  # Addition-entity-watchlist: Line modified
                               getWatchlistCVEbyID,  # Addition-entity-watchlist: Line modified
                               getInfo,
                               setColUpdate,
                               updateWatchlistCVELastmodified)  # Addition-entity-watchlist: Line modified

# Addition-entity-watchlist: End of changes


class DatabaseAction(object):
    actions = collections.namedtuple("Actions", "InsertOne UpdateOne")(0, 1)

    def __init__(self, action, collection, doc):
        self.action = action
        self.collection = collection
        self.doc = doc

# Addition-entity-watchlist: Begining of changes

        self.update_watchlist = update_watchlist
        self.signal_groups = signal_groups

        if self.update_watchlist and collection == 'cves':
            setColUpdate('watchlist', datetime.now())
            self._update_watchlist()

# Addition-entity-watchlist: End of changes

    @property
    def entry(self):
        if self.action == self.actions.InsertOne:
            return InsertOne(self.doc)
        elif self.action == self.actions.UpdateOne:
            return UpdateOne({"id": self.doc["id"]}, {"$set": self.doc}, upsert=True)


# Addition-entity-watchlist: Begining of changes

    def _update_watchlist(self):
        if isBlacklisted(self.doc):
            return
        infos = getInfo('watchlist')
        cve = dict(self.doc)

        done = False
        for entity in getAllEntities():
            found = False
            for cpe in entity['cpes']:
                if found:
                    break
                for vc in cve['vulnerable_configuration']:
                    if cpe in vc:
                        # cve is impacting an entity cpe
                        done = True
                        found = True
                        wcve = getWatchlistCVE(cve['id'], entity['name'], cpe)

                        if cve['cvss3'] == "":  # if cpe detected but has no cvvs score
                            cve['entity'] = entity['name'] + \
                                " cpe detected but no cvss score"  # to be deleted
                            updateWatchlistCVE(cve)
                            sendNotification(
                                cve, new=True if wcve is None else False, signal_groups=self.signal_groups)

                        if wcve and wcve['cvss3'] == cve['cvss3']:
                            updateWatchlistCVELastmodified(
                                {'id': wcve['id'], 'entity': entity['name'], 'product': cpe}, cve['last-modified'])
                            break
                        cve['entity'] = entity['name']
                        cve['product'] = cpe
                        cve['treated'] = False
                        if infos is None or cve['cvss3'] is None or (cve['cvss3'] and cve['cvss3'] >= float(infos['w_threshold_entity'])):
                            updateWatchlistCVE(cve)
                        if infos is None or cve['cvss3'] is None or (cve['cvss3'] and cve['cvss3'] >= float(infos['threshold_entity'])):
                            sendNotification(
                                cve, new=True if wcve is None else False, signal_groups=self.signal_groups)

        if done:
            return
        # cve is not impacting an entity
        wcve = getWatchlistCVEbyID(cve['id'])

        if wcve and wcve['cvss3'] == cve['cvss3']:
            updateWatchlistCVELastmodified(
                {'id': wcve['id']}, cve['last-modified'])
            return

        cve['entity'] = 'all'
        cve['product'] = cve['vulnerable_configuration'][0] if cve['vulnerable_configuration'] else 'unknown'
        cve['treated'] = False

        if cve['cvss3'] != None:  # if a cvss3 exists

            if cve['product'] == 'unknown' and cve['cvss3'] >= 9:  # no cpe name, arbitrary threshold
                updateWatchlistCVE(cve)
                sendNotification(
                    cve, new=True if wcve is None else False, signal_groups=self.signal_groups)

        if cve['summary'] != "":  # not unknown and summary is not empyty

            for entity in getAllEntities():
                for cpe in entity['cpes']:

                    if len(cpe.split(':')) >= 4:  # if the product part exist

                        # get the product name from the whole cpe. Check if it can be empty
                        product_name = cpe.split(':')[4]

                        # check if the product name appears in summary
                        if product_name.upper() in cve['summary'].upper() and (cve['cvss3'] is None or (cve['cvss3'] and cve['cvss3'] >= float(infos['w_threshold_entity']))):
                            cve['entity'] = entity['name'] + \
                                " from summary check"
                            updateWatchlistCVE(cve)
                            sendNotification(
                                cve, new=True if wcve is None else False, signal_groups=self.signal_groups)

# Addition-entity-watchlist: End of changes
